##################
# Mamba Layer
##################
FROM ubuntu:{{ .System.UbuntuVersion }} as mambaforge
ARG MAMBA_VERSION=23.1.0-1

RUN set -ex && \
  apt-get update && \
  apt-get install -y --no-install-recommends \
  build-essential \
  cmake \
  unzip \
  yasm \
  pkg-config \
  libtbb2 \
  libtbb-dev \
  curl \
  ca-certificates \
  && rm -rf /var/lib/apt/lists/* \
  && curl -sSL -o /tmp/mambaforge.sh https://github.com/conda-forge/miniforge/releases/download/{{ .System.MambaVersion }}/Mambaforge-${MAMBA_VERSION}-Linux-x86_64.sh \
  && chmod +x /tmp/mambaforge.sh
# Install conda
RUN /tmp/mambaforge.sh -b -p /opt/conda

{{if .Cuda.Enabled -}}
##################
# Base Layer - GPU
##################
FROM nvidia/cuda:{{.Cuda.Version}}-runtime-ubuntu{{ .System.UbuntuVersion }} as base
{{else -}}
# CPU Base
##################
# Base Layer - CPU
##################
FROM ubuntu:{{ .System.UbuntuVersion }} as base
{{end}}

# Set Env Variables for the images
ENV DEBIAN_FRONTEND=noninteractive \
  LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib" \
  LD_LIBRARY_PATH="/opt/conda/lib:${LD_LIBRARY_PATH}" \
  PATH="/opt/conda/bin:$PATH" \
  CONDA_AUTO_UPDATE_CONDA=false \
  # Set MKL_THREADING_LAYER=GNU to prevent issues between torch and numpy/mkl
  MKL_THREADING_LAYER=GNU \
  # See http://bugs.python.org/issue19846
  LANG=C.UTF-8  \
  # Recommended for running python apps in containers
  PYTHONUNBUFFERED=1

RUN set -ex && \
  apt-get update \
  {{ if gt (len .System.Packages) 0 }}
  && apt-get install -y --no-install-recommends \
    {{ range .System.Packages -}}
    {{- . }} \
    {{ end  -}}
  {{ end }}
  && rm -rf /var/lib/apt/lists/*

# Grab Conda
COPY --from=mambaforge /opt/conda /opt/conda

# Ensure conda environment is always activated
RUN ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \
  && echo ". /opt/conda/etc/profile.d/conda.sh; conda activate base" >> /etc/skel/.bashrc \
  && echo ". /opt/conda/etc/profile.d/conda.sh; conda activate base" >> ~/.bashrc# Install Python and base dependencies

# Install Python and base dependencies
RUN mamba install -y -n base -c conda-forge python={{ .Python.Version }} \
  cython \
  typing \
  libgcc \
  # Instances are Intel-CPU machines, so add extra optimizations
  mkl \
  mkl-include \
  # Below 2 are included in miniconda base, but not mamba so need to install
  conda-content-trust \
  charset-normalizer \
  # Clean conda dependencies
  && mamba clean -ya

{{ if .Python.Poetry  -}}
# Install Poetry
ENV POETRY_VIRTUALENVS_IN_PROJECT=true \
  POETRY_VIRTUALENVS_CREATE=true
RUN python --version \
  && pip install poetry=={{ .Python.Poetry.Version }} \
  && poetry --version
{{ end }}

##################
# Builder Layer
##################
FROM base as builder
ARG ARTIFACTORY_PYPI_USERNAME
ARG ARTIFACTORY_PYPI_PASSWORD

ENV POETRY_HTTP_BASIC_SHIPT_RESOLVE_USERNAME=$ARTIFACTORY_PYPI_USERNAME \
  POETRY_HTTP_BASIC_SHIPT_RESOLVE_PASSWORD=$ARTIFACTORY_PYPI_PASSWORD \
  PROJECT_HOME=/opt/{{ .ProjectName }}

WORKDIR ${PROJECT_HOME}

{{ range .Resources.Config -}}
COPY {{ . }} {{ . }}
{{ end }}

{{- if .Python.Poetry }}
RUN poetry install --only main --no-root
{{ end -}}

{{ range .Resources.Project -}}
COPY {{ . }} {{ . }}
{{ end }}

{{- if .Python.Poetry }}
RUN poetry install --only main
{{ end }}

##################
# Dev Layer
##################
FROM builder as dev

{{- if .Python.Poetry }}
RUN poetry install
{{ end }}

{{ range .Resources.Test -}}
COPY {{ . }} {{ . }}
{{ end }}

##################
# Prod Layer
##################
FROM base as prod

ENV PROMETHEUS_MULTIPROC_DIR=/tmp \
  PROJECT_HOME=/opt/{{ .ProjectName }} \
  PROJECT_PYTHONPATH=${PROJECT_HOME}/.venv/lib/python{{ getShortPythonVersion .Python.Version }}/site-packages \
  PROJECT_VENV_BIN=${PROJECT_HOME}/.venv/bin \
  # prefix the venv bin to the path
  PATH=${PROJECT_VENV_BIN}${PATH:+":$PATH"} \
  # allow invoking without poetry, e.g. can use simply `python -m` instead of `poetry run python -m`
  # this saves about a second of start up time in addition to being simpler to inspect later
  # e.g. /opt/my-project-name/.venv/lib/python3.9/site-packages
  PYTHONPATH=${PROJECT_PYTHONPATH}${PYTHONPATH:+":$PYTHONPATH"}

WORKDIR ${PROJECT_HOME}

{{ range .Resources.Project -}}
COPY --from=builder ${PROJECT_HOME}/{{ . }} ${PROJECT_HOME}/{{ . }}
{{ end }}
